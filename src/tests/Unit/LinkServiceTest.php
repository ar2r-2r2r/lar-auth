<?php

namespace Tests\Unit;

use App\Factories\LinkModelFactory\LinkModelFactory;
use App\Helper\Util;
use App\Models\LinkDetails;
use App\Models\LinkModel;
use App\Repositories\LinkRepository;
use App\Services\LinkService;
use PHPUnit\Framework\TestCase;


class LinkServiceTest extends TestCase
{

    private $linkRepositoryMock;
    private $linkModelFactoryMock;
    private $linkModelMock;
    private $utilMock;
    private $linkDetailsMock;
    private $linkService;




    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->linkRepositoryMock = $this->createMock(LinkRepository::class);
        $this->linkModelFactoryMock = $this->createMock(LinkModelFactory::class);
        $this->linkModelMock = $this->createMock(LinkModel::class);
        $this->utilMock = $this->createMock(Util::class);
        $this->linkDetailsMock = $this->createMock(LinkDetails::class);
        $this->linkService = new LinkService($this->linkRepositoryMock,
            $this->linkModelFactoryMock);

    }

    public function test_Link_service_createLink(): void
    {


        $currentUserId = 1;
        $originalUrl = "qwe";
        $this->linkDetailsMock->expects($this->once())->method('setOriginalUrl')
            ->with($originalUrl);
        $this->linkDetailsMock->setOriginalUrl($originalUrl);
        $this->linkModelMock->expects($this->once())->method('setUserId')
            ->with($currentUserId);
        $this->linkModelMock->setUserId($currentUserId);

        $this->utilMock->expects($this->once())->method('generateShort')
            ->willReturn("short");
        $shortCode = $this->utilMock->generateShort();

        $this->linkModelMock->expects($this->once())->method('setShortCode')
            ->with($shortCode);
        $this->linkModelMock->setShortCode($shortCode);

        $this->linkModelMock->expects($this->exactly(2))->method('getUserId')
            ->willReturn($currentUserId);
        $this->linkModelMock->expects($this->exactly(2))->method('getShortCode')
            ->willReturn($shortCode);


        $this->linkRepositoryMock->expects($this->once())->method('create')->with(
            $this->linkModelMock->getUserId(),
            $this->linkModelMock->getShortCode(),
            $this->linkDetailsMock
        )->willReturn($this->linkModelMock);

        $result = $this->linkRepositoryMock->create(
            $this->linkModelMock->getUserId(),
            $this->linkModelMock->getShortCode(),
            $this->linkDetailsMock
        );


        $this->assertNotEmpty($result);
        $this->assertObjectHasAttribute('createdDate', $result);

    }

    public function test_Link_update_createLink(): void
    {

        $currentUserId = 1;
        $linkId = 1;
        $this->utilMock->expects($this->once())->method('generateShort')
            ->willReturn("short");
        $shortCode = $this->utilMock->generateShort();


        $this->linkModelMock->expects($this->once())->method('setId')
            ->with($linkId);
        $this->linkModelMock->expects($this->once())->method('setUserId')
            ->with($currentUserId);
        $this->linkModelMock->expects($this->once())->method('setShortCode')
            ->with($shortCode);

        $this->linkModelMock->setId($linkId);
        $this->linkModelMock->setUserId($currentUserId);
        $this->linkModelMock->setShortCode($shortCode);



        $this->linkRepositoryMock->expects($this->once())->method('update')->with(
            $this->linkModelMock->getUserId(),
            $this->linkModelMock->getId(),
            $this->linkModelMock->getShortCode(),
        )->willReturn($this->linkModelMock);

        $result = $this->linkRepositoryMock->update(
            $this->linkModelMock->getUserId(),
            $this->linkModelMock->getId(),
            $this->linkModelMock->getShortCode());

        $this->assertNotEmpty($result);
    }

    public function test_getUserLinks(): void
    {
        $userId=1;
        $currentUserId=1;
        $this->linkModelMock->expects($this->once())->method('setUserId')
            ->with($userId);
        $this->linkModelMock->setUserId($userId);

        $this->linkRepositoryMock->expects($this->once())->method('getAllByUser')
            ->with(
                $this->linkModelMock->getUserId(),
                $currentUserId
            );

        $result=$this->linkRepositoryMock->getAllByUser($this->linkModelMock->getUserId(),$currentUserId);
        $this->assertNotEmpty($result);
    }


}